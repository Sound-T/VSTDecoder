/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

namespace BinaryData
{

//================== CMakeLists.txt ==================
static const unsigned char temp_binary_data_0[] =
"\r\n"
"# Source\r\n"
"target_sources(${PROJECT_NAME}\r\n"
"PRIVATE\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_cdf4sap/saf_cdf4sap.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_hoa/saf_hoa_internal.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_hoa/saf_hoa_internal.h\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_hoa/saf_hoa.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_hrir/saf_default_hrirs.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_hrir/saf_hrir_internal.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_hrir/saf_hrir_internal.h\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_hrir/saf_hrir.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_reverb/saf_reverb_internal.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_reverb/saf_reverb_internal.h\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_reverb/saf_reverb.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_sh/saf_sh_internal.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_sh/saf_sh_internal.h\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_sh/saf_sh.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_sofa_reader/saf_sofa_reader.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_tracker/saf_tracker_internal.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_tracker/saf_tracker_internal.h\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_tracker/saf_tracker.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_bessel.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_complex.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_decor.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_error.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_fft.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_filters.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_geometry.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_latticeCoeffs.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_loudspeaker_presets.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_matrixConv.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_misc.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_pitch.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_qmf.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_sensorarray_presets.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_sort.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_utilities/saf_utility_veclib.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_vbap/saf_vbap_internal.c\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_vbap/saf_vbap_internal.h\r\n"
"    ${CMAKE_CURRENT_SOURCE_DIR}/saf_vbap/saf_vbap.c\r\n"
")\r\n";

const char* CMakeLists_txt = (const char*) temp_binary_data_0;

//================== CMakeLists.txt ==================
static const unsigned char temp_binary_data_1[] =
"cmake_minimum_required(VERSION 3.15)\r\n"
"#include(CheckIncludeFiles) # For some reason this causes an error on windows...\r\n"
"\r\n"
"# Check required variables are defined\r\n"
"if(NOT DEFINED SAF_PERFORMANCE_LIB AND NOT APPLE)\r\n"
"    message(FATAL_ERROR \"You must define the SAF_PERFORMANCE_LIB environment variable\")\r\n"
"endif()\r\n"
"if(NOT DEFINED SAF_PERFORMANCE_LIB AND APPLE)\r\n"
"    set(SAF_PERFORMANCE_LIB \"SAF_USE_APPLE_ACCELERATE\")\r\n"
"endif()\r\n"
"\r\n"
"# Pull version number from the framework's main header file:\r\n"
"file(READ \"include/saf.h\" ver)\r\n"
"string(REGEX MATCH \"SAF_VERSION_MAJOR ([0-9]*)\" _ ${ver})\r\n"
"set(ver_major ${CMAKE_MATCH_1})\r\n"
"string(REGEX MATCH \"SAF_VERSION_MINOR ([0-9]*)\" _ ${ver})\r\n"
"set(ver_minor ${CMAKE_MATCH_1})\r\n"
"string(REGEX MATCH \"SAF_VERSION_PATCH ([0-9]*)\" _ ${ver})\r\n"
"set(ver_patch ${CMAKE_MATCH_1})\r\n"
"set(SAF_VERSION \"${ver_major}.${ver_minor}.${ver_patch}\")\r\n"
"\r\n"
"# Display License\r\n"
"if(SAF_ENABLE_TRACKER_MODULE)\r\n"
"    set(SAF_LICENSE \"GNU GPLv2\")\r\n"
"else()\r\n"
"    set(SAF_LICENSE \"ISC\")\r\n"
"endif()\r\n"
"\r\n"
"# SAF Banner:\r\n"
"message(\"\r\n"
"     _____     _____     ______\r\n"
"   (  ____ ) (  ___  ) (  ____  )\r\n"
"   | (    |/ | (   ) | | (    |/\r\n"
"   | (_____  | (___) | | (__\r\n"
"   (_____  ) |  ___  | |  __)\r\n"
"         ) | | (   ) | | (\r\n"
"   /|____) | | |   | | | |\r\n"
"   (_______) |_|   |_| |_|   (Version: ${SAF_VERSION}, License: ${SAF_LICENSE})\r\n"
"\")\r\n"
"\r\n"
"# Configure SAF\r\n"
"message(STATUS \"Configuring the Spatial_Audio_Framework (SAF):\")\r\n"
"project(saf VERSION ${SAF_VERSION} LANGUAGES C)\r\n"
"add_library(${PROJECT_NAME}) #STATIC\r\n"
"set_target_properties(${PROJECT_NAME}\r\n"
"PROPERTIES\r\n"
"    VERSION ${PROJECT_VERSION}\r\n"
"    SOVERSION ${PROJECT_VERSION} \r\n"
")\r\n"
"\r\n"
"# Display system and configuration info\r\n"
"message(STATUS \"${CMAKE_SYSTEM_INFO_FILE}, name: ${CMAKE_SYSTEM_NAME}, arch: ${CMAKE_SYSTEM_PROCESSOR}, sys: ${CMAKE_SYSTEM}\")\r\n"
"if(BUILD_SHARED_LIBS)\r\n"
"    message(STATUS \"Configuring ${PROJECT_NAME} as a SHARED library...\")\r\n"
"else()\r\n"
"    message(STATUS \"Configuring ${PROJECT_NAME} as a STATIC library...\")\r\n"
"endif()\r\n"
"\r\n"
"# Framework include paths\r\n"
"target_include_directories(${PROJECT_NAME} \r\n"
"PUBLIC\r\n"
"    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/>\r\n"
"    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\r\n"
")\r\n"
"include(GNUInstallDirs)\r\n"
"\r\n"
"# Framework source files\r\n"
"add_subdirectory(modules)\r\n"
"add_subdirectory(resources)\r\n"
"\r\n"
"\r\n"
"############################################################################\r\n"
"# Performance library dependencies\r\n"
"if( ${SAF_PERFORMANCE_LIB} MATCHES \"SAF_USE_INTEL_MKL\" )\r\n"
"    target_compile_definitions(${PROJECT_NAME} PUBLIC SAF_USE_INTEL_MKL=1)\r\n"
"\r\n"
"    # Default header path and libs, (which are platform dependent):\r\n"
"    if(NOT DEFINED INTEL_MKL_HEADER_PATH)\r\n"
"        if(MSVC)\r\n"
"            set(INTEL_MKL_HEADER_PATH \"C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/include\") \r\n"
"        elseif(MSYS OR MINGW) \r\n"
"            set(INTEL_MKL_HEADER_PATH \"/c/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/include\") \r\n"
"        elseif(APPLE)\r\n"
"            set(INTEL_MKL_HEADER_PATH \"/opt/intel/compilers_and_libraries/mac/mkl/include\")\r\n"
"        elseif(UNIX AND NOT APPLE)\r\n"
"            if(EXISTS /home/$ENV{USER})\r\n"
"                set(INTEL_MKL_HEADER_PATH \"/home/$ENV{USER}/intel/compilers_and_libraries/linux/mkl/include\")\r\n"
"            elseif(EXISTS \"/opt/intel/compilers_and_libraries/linux/mkl/include\")\r\n"
"                set(INTEL_MKL_HEADER_PATH \"/opt/intel/compilers_and_libraries/linux/mkl/include\")\r\n"
"            else()\r\n"
"                message(SEND_ERROR \"Intel mkl.h default path not found, please specify!\")\r\n"
"            endif()\r\n"
"        endif()\r\n"
"    endif()\r\n"
"    if (NOT DEFINED INTEL_MKL_LIB)\r\n"
"        if(MSVC) \r\n"
"            set(INTEL_MKL_LIB \"${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/Win64/lib/saf_mkl_custom.lib\")  \r\n"
"        elseif(MSYS OR MINGW) \r\n"
"            set(INTEL_MKL_LIB \"${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/Win64/lib/saf_mkl_custom.lib\") \r\n"
"        elseif(APPLE)\r\n"
"            set(INTEL_MKL_LIB \"/usr/local/lib/libsaf_mkl_custom.dylib\") \r\n"
"        elseif(UNIX AND NOT APPLE)\r\n"
"            set(INTEL_MKL_LIB \"/usr/lib/libsaf_mkl_custom.so\") \r\n"
"        endif()\r\n"
"    endif()\r\n"
"\r\n"
"    if (NOT EXISTS \"${INTEL_MKL_HEADER_PATH}/mkl.h\")\r\n"
"        message(SEND_ERROR \"Intel mkl.h not found\")\r\n"
"    endif()\r\n"
"    message(STATUS \"Using Intel MKL. Linking against: ${INTEL_MKL_LIB}\")\r\n"
"\r\n"
"    # Add target header paths and libs\r\n"
"    target_include_directories(${PROJECT_NAME} PUBLIC ${INTEL_MKL_HEADER_PATH} )\r\n"
"    target_link_libraries(${PROJECT_NAME} PUBLIC ${INTEL_MKL_LIB} )\r\n"
"\r\n"
"elseif( ${SAF_PERFORMANCE_LIB} MATCHES \"SAF_USE_OPEN_BLAS_AND_LAPACKE\")\r\n"
"    message(STATUS \"Using openBLAS...\")\r\n"
"    target_compile_definitions(${PROJECT_NAME} PUBLIC SAF_USE_OPEN_BLAS_AND_LAPACKE=1)\r\n"
"\r\n"
"    # find and link libraries\r\n"
"    if (NOT DEFINED OPENBLAS_LIBRARY)\r\n"
"        find_library(OPENBLAS_LIBRARY openblas)\r\n"
"    endif()\r\n"
"    if (NOT DEFINED LAPACKE_LIBRARY)\r\n"
"        find_library(LAPACKE_LIBRARY lapacke)\r\n"
"    endif()\r\n"
"    target_link_libraries(${PROJECT_NAME} PUBLIC ${OPENBLAS_LIBRARY} ${LAPACKE_LIBRARY})\r\n"
"\r\n"
"    # Add header search paths if they are defined\r\n"
"    if(DEFINED OPENBLAS_HEADER_PATH)\r\n"
"        target_include_directories(${PROJECT_NAME} PUBLIC ${OPENBLAS_HEADER_PATH})\r\n"
"    endif()\r\n"
"    if(DEFINED LAPACKE_HEADER_PATH)\r\n"
"        target_include_directories(${PROJECT_NAME} PUBLIC ${LAPACKE_HEADER_PATH})\r\n"
"    endif()\r\n"
"\r\n"
"    # Disable this particular warning...\r\n"
"    if(UNIX)\r\n"
"        target_compile_options(${PROJECT_NAME} PRIVATE -Wno-incompatible-pointer-types)\r\n"
"    endif()\r\n"
"\r\n"
"elseif( ${SAF_PERFORMANCE_LIB} MATCHES \"SAF_USE_ATLAS\")\r\n"
"    message(STATUS \"Using ATLAS...\")\r\n"
"    message(SEND_ERROR \"Not yet supported! Please contribute if you use this library.\")\r\n"
"\r\n"
"elseif(APPLE AND ${SAF_PERFORMANCE_LIB} MATCHES \"SAF_USE_APPLE_ACCELERATE\")\r\n"
"    message(STATUS \"Using Apple Accelerate. Linking against the Accelerate framework...\")\r\n"
"    target_compile_definitions(${PROJECT_NAME} PUBLIC SAF_USE_APPLE_ACCELERATE=1) \r\n"
"    target_link_libraries(${PROJECT_NAME} PUBLIC \"-framework Accelerate\") \r\n"
"\r\n"
"else()\r\n"
"    message(SEND_ERROR \"The specified SAF_PERFORMANCE_LIB is not supported\")\r\n"
"\r\n"
"endif()\r\n"
"\r\n"
"\r\n"
"############################################################################\r\n"
"# Sofa reader module dependencies\r\n"
"if(SAF_ENABLE_SOFA_READER_MODULE)\r\n"
"    message(STATUS \"saf_sofa_reader module enabled. Linking against netcdf...\")\r\n"
"\r\n"
"    # Indicate to saf that the saf_sofa_reader module should be enabled\r\n"
"    target_compile_definitions(${PROJECT_NAME} PUBLIC SAF_ENABLE_SOFA_READER_MODULE=${SAF_ENABLE_SOFA_READER_MODULE})\r\n"
"        \r\n"
"    # Header path and libs are platform dependent\r\n"
"    if(MSVC) \r\n"
"        target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/Win64/include)\r\n"
"        target_link_libraries(${PROJECT_NAME} \r\n"
"        PRIVATE\r\n"
"            ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/Win64/lib/netcdf.lib\r\n"
"            ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/Win64/lib/libhdf5.lib\r\n"
"            ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/Win64/lib/libzlib.lib\r\n"
"            ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/Win64/lib/libszip.lib\r\n"
"            ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/Win64/lib/libhdf5_hl.lib\r\n"
"        ) \r\n"
"    elseif(MSYS OR MINGW)\r\n"
"        message(SEND_ERROR \"Unsupported on MSYS because I can't get the damn thing to link no matter what I do..\") \r\n"
"        target_include_directories(${PROJECT_NAME} PUBLIC \r\n"
"             /c/msys64/mingw64/include)\r\n"
"        #set (CMAKE_SHARED_LINKER_FLAGS \"-lnetcdf\")\r\n"
"        find_library(NETCDF_LIBRARY netcdf HINTS \"/c/msys64/mingw64/lib/libnetcdf.dll.a\")\r\n"
"        if (NOT NETCDF_LIBRARY)\r\n"
"            message(FATAL_ERROR \"NETCDF_LIBRARY not found\")\r\n"
"        endif()\r\n"
"        target_link_libraries(${PROJECT_NAME} INTERFACE ${NETCDF_LIBRARY})\r\n"
"         \r\n"
"    elseif(APPLE)\r\n"
"        target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/MacOSX/include)\r\n"
"        target_link_libraries(${PROJECT_NAME} \r\n"
"        PRIVATE\r\n"
"            ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/MacOSX/lib/libnetcdf.a\r\n"
"            ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/MacOSX/lib/libhdf5.a\r\n"
"            ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/MacOSX/lib/libz.a \r\n"
"            ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/MacOSX/lib/libhdf5_hl.a\r\n"
"        )  \r\n"
"    elseif(UNIX AND NOT APPLE) \r\n"
"        find_library(NETCDF_LIBRARY netcdf HINTS /usr/lib/x86_64-linux-gnu)\r\n"
"        if (NOT NETCDF_LIBRARY)\r\n"
"            message(FATAL_ERROR \"NETCDF_LIBRARY not found\")\r\n"
"        endif()\r\n"
"        target_link_libraries(${PROJECT_NAME} PUBLIC ${NETCDF_LIBRARY})\r\n"
"    endif() \r\n"
"\r\n"
"else()\r\n"
"    message(STATUS \"saf_sofa_reader module disabled.\")\r\n"
"endif()\r\n"
"\r\n"
"\r\n"
"############################################################################\r\n"
"# Enable/Disable tracker module\r\n"
"if(SAF_ENABLE_TRACKER_MODULE)\r\n"
"    message(STATUS \"saf_tracker module enabled. \")\r\n"
"\r\n"
"    # Indicate to saf that the saf_sofa_reader module should be enabled\r\n"
"    target_compile_definitions(${PROJECT_NAME} PUBLIC SAF_ENABLE_TRACKER_MODULE=${SAF_ENABLE_TRACKER_MODULE})\r\n"
"\r\n"
"else()\r\n"
"    message(STATUS \"saf_tracker module disabled.\")\r\n"
"endif()\r\n"
"\r\n"
"\r\n"
"############################################################################\r\n"
"if(UNIX)\r\n"
"    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra)\r\n"
"endif()\r\n"
"\r\n"
"\r\n"
"############################################################################\r\n"
"# set RPATHs\r\n"
"set(CMAKE_INSTALL_RPATH $ORIGIN)\r\n";

const char* CMakeLists_txt2 = (const char*) temp_binary_data_1;


const char* getNamedResource (const char* resourceNameUTF8, int& numBytes)
{
    unsigned int hash = 0;

    if (resourceNameUTF8 != nullptr)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x90e15cf5:  numBytes = 2434; return CMakeLists_txt;
        case 0x8b4a41dd:  numBytes = 9481; return CMakeLists_txt2;
        default: break;
    }

    numBytes = 0;
    return nullptr;
}

const char* namedResourceList[] =
{
    "CMakeLists_txt",
    "CMakeLists_txt2"
};

const char* originalFilenames[] =
{
    "CMakeLists.txt",
    "CMakeLists.txt"
};

const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8)
{
    for (unsigned int i = 0; i < (sizeof (namedResourceList) / sizeof (namedResourceList[0])); ++i)
    {
        if (namedResourceList[i] == resourceNameUTF8)
            return originalFilenames[i];
    }

    return nullptr;
}

}
